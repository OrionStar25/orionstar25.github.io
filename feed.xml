<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://orionstar25.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://orionstar25.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-04-23T12:08:04+00:00</updated><id>https://orionstar25.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Fedora Women‚Äôs Day 2019</title><link href="https://orionstar25.github.io/blog/2019/fwd-19/" rel="alternate" type="text/html" title="Fedora Women‚Äôs Day 2019"/><published>2019-11-08T00:00:00+00:00</published><updated>2019-11-08T00:00:00+00:00</updated><id>https://orionstar25.github.io/blog/2019/fwd-19</id><content type="html" xml:base="https://orionstar25.github.io/blog/2019/fwd-19/"><![CDATA[<p>On 4th November, 2019 we celebrated <strong>Fedora Women‚Äôs Day</strong> at IIIT Allahabad. I, alongwith <a href="https://www.facebook.com/aadya.mishra.583">Aadya Mishra</a> co-organized this event for an audience mainly consisting of first and second year girls, pursuing either Information Technology or Electronics and Communication. Everyone had a basic grasp on simple coding concepts, but after interacting with them it was clear that very few knew about the various opportunities girls have in the technology field and open source. Hence, I decided to take this opportunity to explain to these budding minds how much fun and full of possibilities it is to be a <strong>#WomanInTech</strong>.</p> <p>In order to start preparations for this event, we decided to have an attractive poster. Our obvious choice for its design was another talented woman, <a href="https://www.facebook.com/sunidhi.kashyap.5283">Sunidhi Kashyap</a>.</p> <blockquote> <p><strong>Fedora Women‚Äôs Day (FWD) is a day of celebration to help raise awareness and thanks for the women contributors across the Fedora Project. Fedora Women‚Äôs Day marks the anniversary of the Fedora Women team. They are an opportunity for women to learn about free and open source software and jump-start their journey as a FOSS user and/or a contributor.</strong></p> </blockquote> <blockquote> <p><strong>We have a series of fun events lined-up for all of you including:</strong> <strong>~ Mini games</strong> <strong>~ Hands-on session on how to start contributing to Fedora</strong> <strong>~ Learn to deliver talks in conferences</strong> <strong>~ Fedora opportunities and networking</strong> <strong>~ FOOD and SWAG!</strong> <strong>~ and much, much more</strong></p> </blockquote> <p><img src="http://tiny.cc/omoyfz" alt=""/></p> <p>My entire aim was to use this session to motivate these girls enough to understand their options in the field of computer science and its associated technology. Hence I created an extensive 2-hour session revolving around such topics.</p> <p>I started by introducing the <strong>Fedora DI Team</strong> and its role in nurturing inclusive events across the Fedora community and raising awareness about diversity around the globe. I explained how one can be a part of the DI team and still be called an open source contributor. Next I explained what open source means and what all Fedora offers in the community. This was followed by an interactive game where everyone were to name 5 OSS they‚Äôve used in their lives till now.</p> <p>I then moved on to explain the various coding programmes Fedora is part of, namely, <strong>Outreachy and GSoC</strong>. I gave an overview of:</p> <ol> <li>Each programs‚Äô purpose and perks.</li> <li>How one can benefit with the constant mentorship and</li> <li>How inclusive and welcoming Fedora is to its beginner contributors.</li> </ol> <p>I shared my Outreachy and Flock experience, and they seemed absolutely thrilled to be a part of something so empowering. Since most of the girls‚Äô main worry was that whether they were good enough to contribute, I gave real coding examples from my Outreachy selection process so that they knew what kind of open-source issues to expect (and that they were absolutely easy to solve).</p> <p>After I had gotten them all bustling with enthusiasm and hope, I introduced them to the Women of Fedora by showing a short video. This was followed by addressing the elephant in the room: <strong>Imposter Syndrome</strong>. They were all made to understand that they‚Äôre all much more talented than they give themselves credit for. To implement this, we had a quick <strong>#IAmRemarkable</strong> session, inspired by Google wherein each girl spoke about 5 achievements of her. It made them realize they‚Äôre all full of potential.</p> <p>I then bombarded them with a whole lot of links about scholarships, conferences, and funded speaking opportunites so that they could discover their passion in their university life by networking and exploring various fileds. Since majority of the audience consisted of first years, I gave them tips as to how can they make productive use of their winter and summer break.</p> <p>The extensive session ended with feedback, general brainstorming, and was peppered with tasty refreshments. Every girl left with a lot to think about and the atmosphere was heavily postive and encouraging. I couldnt‚Äôt be more proud sharing my knowledge with these aspirants. After all I was once like them :D</p> <p>You can access the slides here: <a href="https://github.com/OrionStar25/Delivered-Conference-Talks">slides</a></p> <p><img src="https://pbs.twimg.com/media/EImgyVzU4AAnv6-.jpg" alt=""/></p>]]></content><author><name></name></author><category term="open-source"/><category term="fedora"/><category term="women"/><category term="college"/><category term="life"/><category term="jekyll"/><category term="career"/><category term="experience"/><category term="fwd"/><category term="scholarships"/><summary type="html"><![CDATA[We celebrated FWD at IIIT-Allahabad! This is the event's report.]]></summary></entry><entry><title type="html">IT‚ÄôS A WRAP!</title><link href="https://orionstar25.github.io/blog/2019/outreachy-week-13/" rel="alternate" type="text/html" title="IT‚ÄôS A WRAP!"/><published>2019-08-22T00:00:00+00:00</published><updated>2019-08-22T00:00:00+00:00</updated><id>https://orionstar25.github.io/blog/2019/outreachy-week-13</id><content type="html" xml:base="https://orionstar25.github.io/blog/2019/outreachy-week-13/"><![CDATA[<blockquote> <p>üé∂ <em>Country roads</em> <br/> <em>Take me home</em> <br/> <em>To the place</em> <br/> <em>I belong</em> <br/> <em>West Virginia</em> <br/> <em>Mountain Momma</em> <br/> <em>Take me home</em> <br/> <em>Country Roads</em> üé∂</p> </blockquote> <p>In this song, <code class="language-plaintext highlighter-rouge">Country roads == Open source</code>; <code class="language-plaintext highlighter-rouge">Home == Outreachy + Fedora family</code>; <code class="language-plaintext highlighter-rouge">Mountain == humongous amount of knowledge I gained</code>.</p> <p>The last 3 months of my life have not been a breeze, they‚Äôve been a whirlpool and I have been in the exact centre of it! I was finishing tasks as and when they came, was meeting new people almost everyday, all while away in a new city‚Ä¶.</p> <blockquote> <p>But the moment I used to open <a href="https://github.com/fedora-modularity/libmodulemd">libmodulemd‚Äôs</a> Github and log into IRC, I felt at home.</p> </blockquote> <p>I started as a self doubting kid and I‚Äôm going away as a confident, full-of-dreams kid. Outreachy has made me CAPABLE. I no longer use clip-on wings, because I‚Äôve grown a pair (and that too very shiny ones)! There are a lot of Open Source programs out there, but NONE of them compare to Outreachy for me. Not even GSoC. Every single thing I did in this internship was purely out of passion and the will to get better holistically. I <em>wanted</em> to write blogs, chat with mentors, learn new technology, and network with people.</p> <p>AND OUTREACHY MADE SURE I DID. They:</p> <ol> <li> <p>Sent regular bi-weekly email prompts to write blogs which also provided fantastic topics + tips to write blogs on.</p> </li> <li> <p>Had assignments for mentors too! They DEFINITELY wanted us to fully squeeze this opportunity and enable us in every way possible.</p> </li> <li> <p>Held regular Outreachy chats including all participants, mentors, and alumni on topics like: career, project progress, making connections, etc.</p> </li> <li> <p>I recently heard someone stating that GSoC is where all the ‚Äúreal talent‚Äù is, and Outreachy is mere ‚Äúspoon-feeding‚Äù. Yes, I‚Äôve had my mentor walk me through some really tough roadblocks, and yes he has reviewed my code thoroughly at all times. But THAT‚ÄôS NOT SPOON-FEEDING. That‚Äôs just good mentorship (thank you, Sir!). Outreachy projects are perfect for 3-month internships! They‚Äôre a right balance of researching and implementation. <strong>And FYI, MANY Outreachy projects are ALSO GSoC projects WITH THE SAME SET OF MENTORS!</strong></p> </li> <li> <p>Finally, provide a $500 travel stipend that you could use for conferences and tech events.</p> </li> </ol> <p>I‚Äôll admit I was quite apprehensive how I could possibly manage to dole out ‚Äúsignificant‚Äù code when I had absolutely no internship experience before. I thought I‚Äôd have to work day and night because the concept of a ‚Äúremote‚Äù internship was new to me. Thankfully, Outreachy was super flexible and not hectic at all! I used a MAMMOTH amount of concepts:</p> <ol> <li>Object C</li> <li>Unit testing in Python and Object C</li> <li>Dockers</li> <li>Still learning <a href="https://docs.python.org/3/library/unittest.mock.html">Python Mocks</a> üòú</li> <li>Git Rebase!! (This one was amazing xD)</li> <li>Python Babel</li> <li>Fedora tools like Modularity, Zanata, Koji Builds</li> <li>IRC üòÇ</li> </ol> <p>My project was divided into 3 major tasks and 1 stretch goal. And I can proudly say that <strong>I have completed all the 3 major tasks during my internship period!</strong> The library <a href="https://github.com/fedora-modularity/ModulemdTranslationHelpers">‚ÄúModulemd Translation Helpers‚Äù</a> is fully functional but just needs a little extra push to make it deployable. I:</p> <ol> <li>Converted a Modulemd Index object into Babel Catalogs.</li> <li>Converted translated Catalogs to translation documents and added them back to Index object.</li> <li>Integrated the Koji Build System for dynamic flow of metadata</li> </ol> <p>Now we‚Äôre only left to inject this new index object metadata into existing YAML by the use of an OS compose tool called Pungi. Hence then these translations will be avalaible to all Fedora users!</p> <blockquote> <p><strong>Still, the MOST AMAZING thing that has happened with me during this internship was my visit to Flock to Fedora at Budapest, Hungary and present all of this work as part of the Summer Coding Showcase.</strong></p> </blockquote> <p>I met my mentor <a href="https://twitter.com/sgallagh_redhat">Stephan Gallagher</a> and we chatted on almost everything! I met people from Panama, Czech Republic, Mexico, USA, India (obviously :P), China, Nicaragua and so many more and I discussed everything that happens there and how its different than my culture. We talked tech and how we could improve it further for people, not just pertaining to Red Hat or Fedora. I attended so many talks and workshops related to Translations, Internationalization (I20N), Modularity, and Red Hat. I also witnessed a MIND_BLOWING CANDY SWAP where people got different kinds of candies from their countries!</p> <p>Just when you thought you couldn‚Äôt possibly do EVERYTHING in 3 months, WELL I JUST DID! It‚Äôs time to move further and take these experiences with me. Its time to make those shiny wings multi-coloured üåû</p> <p><img src="https://drive.google.com/uc?export=view&amp;id=0B6ForE8OhMdTWkVkVXJVRkxFOXFhSmdURmVNX2pTTjc2cmFZ" alt="Yay"/></p>]]></content><author><name></name></author><category term="open-source"/><category term="open source"/><category term="outreachy"/><category term="technology"/><category term="gsoc"/><category term="research"/><category term="python"/><category term="jekyll"/><category term="modularity"/><category term="fedora"/><summary type="html"><![CDATA[Bye bye Outreachy, thank you for making me capable üíì]]></summary></entry><entry><title type="html">What now? #CareerGoals</title><link href="https://orionstar25.github.io/blog/2019/outreachy-week-9/" rel="alternate" type="text/html" title="What now? #CareerGoals"/><published>2019-08-21T00:00:00+00:00</published><updated>2019-08-21T00:00:00+00:00</updated><id>https://orionstar25.github.io/blog/2019/outreachy-week-9</id><content type="html" xml:base="https://orionstar25.github.io/blog/2019/outreachy-week-9/"><![CDATA[<p>2019 was an absolute blast for me and it isn‚Äôt even over yet! I won a national-level hackathon, got good grades, completed TWO internships successfully, secured a job, attended my first technical conference, presented my Outreachy work in front of fellow Fedorans, gave a community talk and went to a foreign country without my parents(this one was my most commendable feat I think xD)! I have to admit I had been planning and trying out various options regarding my internships for over a year now. There were so many ‚Äúthings-should-go-this-way‚Äù timelines that I had created, and most of them were ultimately scraped off. But I can say confidently that things DID work out in the end and hardwork DID pay off and I am super grateful for that.</p> <p>So now since that huge phase of my life is over, let‚Äôs start planning the NEXT BIG phase of my life!</p> <p>I‚Äôm currently in my last year of B.Tech. According to my university rules, the last semester(Jan-May) is reserved entirely for a project of 20 credits. I could do this project:</p> <ol> <li>At a company as an industrial internship.</li> <li>Under a professor as a research internship.</li> <li>At my university as a research project.</li> </ol> <p>I am still not sure what exactly I want to do career-wise but I have some very definite ideas of how I am going to figure that out. I‚Äôve done an industrial internship at a startup. I‚Äôve done a remote open-source internship, I‚Äôve made several research projects under my university professors‚Äô guidance. So now its time for A RESEARCH INTERNSHIP! I‚Äôll keep the details very very brief(incase some potential professor sees this and wants to take me as an intern :‚Äô) )</p> <ul> <li>Are you looking for a job, internship, a grant, a volunteer position, or some type of other opportunity?</li> </ul> <blockquote> <p>Research internship abroad at a reputed university under a professor.</p> </blockquote> <ul> <li>What types of work would you like to contribute to?</li> </ul> <blockquote> <p>Research pertaining to:</p> <ol> <li>Machine learning and/or</li> <li>Deep learning and/or</li> <li>Natural Language Processing</li> </ol> </blockquote> <ul> <li>What tools or skills do you have that would help you with that work?</li> </ul> <blockquote> <p>I have 4 major projects done in that domain:</p> <ol> <li>2 in Natural Language Processing</li> <li>1 in Ensemble Learning</li> <li>1 in attention-based convolutional recurrent network <strong>all graded A+ as part of semester-long projects</strong> I am fluent with python and ML concepts, and can implement all algorithms with/without using existing frameworks. I believe in doing extensive research about various approaches befoe implementing a model.</li> </ol> </blockquote> <ul> <li>What tools or skills would you like to learn?</li> </ul> <blockquote> <p>I would like to experience exhaustive research based approaches to solutions. How to tweak models for better, faster results, and understand their nature of working.</p> </blockquote> <ul> <li>What interpersonal skills make you a collaborative team member?</li> </ul> <blockquote> <p>I listen to feedback and work accordingly. There is healthy discussion before everyone agrees on a solution. I believe in the ‚Äúgive-and-take‚Äù approach and hence shall learn and let learn when in a group.</p> </blockquote> <ul> <li>What languages do you speak, and at what school grade level?</li> </ul> <blockquote> <p>English(fluent), Hindi(fluent). 4th year of Bachelors in Information Technology.</p> </blockquote> <ul> <li>When are you available to start work?</li> </ul> <blockquote> <p>January, 2020</p> </blockquote> <ul> <li>Are you able to move, and if so, which countries/regions are you willing to move to?</li> </ul> <blockquote> <p>Anywhere which is accessible from India, will need a little funding though.</p> </blockquote> <ul> <li>Are you looking for a full-time or part-time paid position?</li> </ul> <blockquote> <p>A 6-month (semester long) research internship</p> </blockquote> <p>Here is my:</p> <ol> <li><a href="https://www.linkedin.com/in/niharikashrivastava/">LinkedIn</a></li> <li><a href="https://drive.google.com/file/d/1RdlMXxo7Vp3gNQvL0UmixyXoesODmfr4/view?usp=sharing">Resume</a></li> </ol>]]></content><author><name></name></author><category term="open source"/><category term="outreachy"/><category term="technology"/><category term="gsoc"/><category term="research"/><category term="python"/><category term="jekyll"/><category term="modularity"/><category term="fedora"/><summary type="html"><![CDATA[A piece of my current state of mind regarding my career goals]]></summary></entry><entry><title type="html">The Diary of a Gojek Summer Intern</title><link href="https://orionstar25.github.io/blog/2019/the-diary-of-a-gojek-summer-intern/" rel="alternate" type="text/html" title="The Diary of a Gojek Summer Intern"/><published>2019-08-05T03:56:51+00:00</published><updated>2019-08-05T03:56:51+00:00</updated><id>https://orionstar25.github.io/blog/2019/the-diary-of-a-gojek-summer-intern</id><content type="html" xml:base="https://orionstar25.github.io/blog/2019/the-diary-of-a-gojek-summer-intern/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Season @ Fedora Modularity</title><link href="https://orionstar25.github.io/blog/2019/outreachy-week-7/" rel="alternate" type="text/html" title="Season @ Fedora Modularity"/><published>2019-07-23T00:00:00+00:00</published><updated>2019-07-23T00:00:00+00:00</updated><id>https://orionstar25.github.io/blog/2019/outreachy-week-7</id><content type="html" xml:base="https://orionstar25.github.io/blog/2019/outreachy-week-7/"><![CDATA[<p>Hello all! It‚Äôs <strong>Open Source Summer</strong> coding season at <strong>The Fedora Project</strong>. Translations are pouring heavily at <strong>Modularity</strong>, a strong gust of <strong>Happiness Packets</strong> are incoming in from the East, <strong>Fedora pipelines</strong> are being modified to handle the frequent Fedora releases.</p> <p>I‚Äôm VERY excited to be writing this blog post. I have essentially only a month left for my Outreachy internsip with The Fedora Project to end. Surprisingly, this realization is of a bitter-sweet one. The amount of skills I‚Äôve picked up during my 2 months of Outreachy are simply priceless. I not only tried to code within deadlines, but also learnt new concepts and technology, implemeted it to reflect into my code, networked with different people as part of fedora community bonding, made MAJOR mistakes, tried to redeem myself from them (still working on that üôà), and I‚Äôm DEFINITELY not done just yet!</p> <h2 id="my-optimististic-timelines-">My Optimististic timelines üòÇ</h2> <p>Outreachy mentors and interns start the internship with a specific set of project goals. These timelines are ususally a very optimistic view of what could happen if everything goes exactly as planned. IT OFTEN DOESN‚ÄôT, but people still make optimistic plans. This concept is called as <a href="https://en.wikipedia.org/wiki/Planning_fallacy">Planning Fallacy</a>. Projects always feel easy to work on initially. But delays to projects happen. Maybe your project turned out to be more complicated than you or your mentor anticipated. Maybe you needed to learn some concepts before you could tackle project tasks. Maybe the community documention wasn‚Äôt up-to-date or was wrong.</p> <p>Keeping all this in mind, this was my initial timeline:</p> <blockquote> <p><strong>May 20, 2019 - May 25, 2019</strong> - Shall participate via community bonding. Will continuously be in touch with the mentor to break down the internship tasks into steps for the coming days. Will go through the code base thoroughly to look for vulnerabilities, potential bugs, and redundancies.</p> </blockquote> <blockquote> <p><strong>May 26, 2019 - June 10, 2019</strong> - Implement any test that exists only in Python, in C, to ensure that they are getting properly tested by the static analysis and memory-leak checkers (valgrind). This would essentially involve copying already written python tests to C.</p> </blockquote> <blockquote> <p><strong>June 11, 2019 - July 10, 2019</strong> - Write code for a set of new tests which will be provided by the mentor.</p> </blockquote> <blockquote> <p><strong>July 11, 2019 - Aug 11, 2019</strong> - Scan the library for any leftover tests, or vulnerabilities. Write exhaustive unit tests for the leftover code blocks and extend some already written tests (if necessary). Try to make the tests modular by breaking them into smaller tests for maintainability.</p> </blockquote> <blockquote> <p><strong>Aug. 12, 2019 - Aug. 20, 2019</strong> - Update documentation for all the changes made during the internship.</p> </blockquote> <p>And then my project changed completely. This time, my mentor made my new timeline:</p> <blockquote> <p><strong>Phase 1</strong>: Extract all translatable strings from the modules that have been built for each Fedora release and submit them to the translation tool, Zanata, for the translators to work on.</p> </blockquote> <blockquote> <p><strong>Phase 2</strong>: Retrieve the finished translations and use the libmodulemd API to turn them into modulemd-translations documents.</p> </blockquote> <blockquote> <p><strong>Stretch Goal</strong>: Include the code from Phase 2 into Fedora‚Äôs repo creation automation so that it gets updated automatically every day.</p> </blockquote> <p><img src="../assets/img/lifecycle_translation.png" alt="Translation Lifecycle"/></p> <p>I must say this timeline seemed very relaxed and exciting to me. This project felt like I was a consumer AND a developer for libmodulemd both at the same time.</p> <h2 id="project-flow">Project flow</h2> <p>Now that my project was broken down into tasks, I had to understand each of these problems thoroughly and break them into smaller tasks. That way, I could create a workflow and convert it into modular code. For any task I undertook, I was expected to:</p> <ol> <li>Discuss the goal of that task and do theoritical study on the required concepts.</li> <li>Write a requirements document stating: <ol> <li>All the constraints.</li> <li>Expected input/output.</li> <li>Dependencies needed(if any).</li> <li>Activity flowchart described into words</li> </ol> </li> <li>Write unit tests first for the task validating our expectation of the workflow. This is called <a href="https://www.guru99.com/test-driven-development.html">Test-Driven Development</a>.</li> <li>Finally write code and fix any intermediary bugs or add necessary features on the way.</li> <li>Ask doubts throughout, if stuck.</li> </ol> <p>Here is an extract of a Software Requirement Specification (SRS) document for my first task. You can check out the whole document <a href="https://docs.google.com/document/d/1FANPQE1qwpIjgYGIDGxNH5pOcQ4VMq9O0Xy9Ie0t_ZM/edit?ts=5ce6e6f5">here</a>.</p> <p><img src="../assets/img/SRS.png" alt="SRS Document"/></p> <h2 id="task-1">Task 1</h2> <blockquote> <p>Extract all translatable strings from the modules that have been built for each Fedora release and submit them to the translation tool, Zanata, for the translators to work on.</p> </blockquote> <p><img src="../assets/img/phase1.png" alt="Phase 1"/></p> <h3 id="extraction">Extraction</h3> <ol> <li>Fedora modular metadata is divided into modules which are stored as <code class="language-plaintext highlighter-rouge">YAML</code> files.</li> <li>Every <code class="language-plaintext highlighter-rouge">YAML</code> file is loaded into a <code class="language-plaintext highlighter-rouge">ModulemdIndex</code> object.</li> <li>Each <code class="language-plaintext highlighter-rouge">ModulemdIndex</code> object contains <code class="language-plaintext highlighter-rouge">ModulemdModule</code> objects.</li> <li>Each <code class="language-plaintext highlighter-rouge">ModulemdModule</code> object contains <code class="language-plaintext highlighter-rouge">ModulemdModuleStream</code> objects.</li> <li>Each <code class="language-plaintext highlighter-rouge">ModulemdModuleStream</code> (identified by their <a href="https://orionstar25.github.io/outreachy-week-2/">NSVCA</a>) object contains 3 translatable strings: <ol> <li>Summary</li> <li>Description</li> <li>Profile description (There may be zero or more profiles. Each profile may have a description and an arbitrary profile name.)</li> </ol> </li> </ol> <p>We stored all the strings of a <code class="language-plaintext highlighter-rouge">module:stream</code> pair that were only of the <strong>highest</strong> version. It is acceptable to assume that if there are multiple matching <code class="language-plaintext highlighter-rouge">streams</code> of the same <code class="language-plaintext highlighter-rouge">module</code>, <code class="language-plaintext highlighter-rouge">stream</code> and <code class="language-plaintext highlighter-rouge">version</code> but different <code class="language-plaintext highlighter-rouge">context</code> and/or <code class="language-plaintext highlighter-rouge">architecture</code> that you do not need to care about <code class="language-plaintext highlighter-rouge">context</code> and <code class="language-plaintext highlighter-rouge">architecture</code>. The module build system ensures that all <code class="language-plaintext highlighter-rouge">context/arches</code> share the same summary, description and profiles across the <code class="language-plaintext highlighter-rouge">version</code>.</p> <h3 id="submit-to-translation-tool">Submit to Translation tool</h3> <p><a href="https://fedora.zanata.org/?dswid=-2287">Zanata</a> is a translation tool that Fedora relies on right now for its localization needs. It accepts <a href="http://babel.pocoo.org/en/latest/api/messages/catalog.html">Babel Catalogs</a> (<code class="language-plaintext highlighter-rouge">gettext .pot</code> files) containing unique strings in one language as keys along with their locations of occurrences in the file. All these strings need to be unique in the catalog. This is important because <code class="language-plaintext highlighter-rouge">gettext .pot</code> files cannot handle having the same source string appear more than once. These catalogs are further processed into <code class="language-plaintext highlighter-rouge">.po</code> (portable object) files and forwarded for translation. Locations are of the type:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">module_name</span><span class="p">;</span><span class="n">stream_name</span><span class="p">;</span><span class="n">string_type</span>
</code></pre></div></div> <p>To put this in terms of code, there is a <code class="language-plaintext highlighter-rouge">ModulemdIndex</code> object as input, and we return a <code class="language-plaintext highlighter-rouge">Babel Catalog</code> as the output.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">get_translation_catalog_from_index</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">project_name</span><span class="p">):</span>
	<span class="bp">...</span>
	<span class="k">return</span> <span class="n">catalog</span>
</code></pre></div></div> <p>Next, to extract the translatable strings (or just strings, for brevity):</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="c1"># Get all Modulemd.Module object names
</span>    <span class="n">module_names</span> <span class="o">=</span> <span class="n">index</span><span class="p">.</span><span class="nf">get_module_names</span><span class="p">()</span>

    <span class="c1"># Create a list containing highest version streams of a module
</span>    <span class="n">final_streams</span> <span class="o">=</span> <span class="nf">list</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">module_name</span> <span class="ow">in</span> <span class="n">module_names</span><span class="p">:</span>
        <span class="n">module</span> <span class="o">=</span> <span class="n">index</span><span class="p">.</span><span class="nf">get_module</span><span class="p">(</span><span class="n">module_name</span><span class="p">)</span>
        <span class="n">stream_names</span> <span class="o">=</span> <span class="n">module</span><span class="p">.</span><span class="nf">get_stream_names</span><span class="p">()</span>

        <span class="k">for</span> <span class="n">stream_name</span> <span class="ow">in</span> <span class="n">stream_names</span><span class="p">:</span>
            <span class="c1"># The first item returned is guaranteed to be the highest version
</span>            <span class="c1"># of that stream in that module.
</span>            <span class="n">stream</span> <span class="o">=</span> <span class="n">module</span><span class="p">.</span><span class="nf">search_streams</span><span class="p">(</span><span class="n">stream_name</span><span class="p">,</span> <span class="mi">0</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">final_streams</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>

    <span class="c1"># A dictionary to store:
</span>    <span class="c1"># key: all translatable strings
</span>    <span class="c1"># value: their respective locations
</span>    <span class="n">translation_dict</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">stream</span> <span class="ow">in</span> <span class="n">final_streams</span><span class="p">:</span>
        <span class="c1"># Process description
</span>        <span class="n">description</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="nf">get_description</span><span class="p">(</span><span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">location</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">{};{};description</span><span class="sh">"</span><span class="p">).</span><span class="nf">format</span><span class="p">(</span>
            <span class="n">stream</span><span class="p">.</span><span class="n">props</span><span class="p">.</span><span class="n">module_name</span><span class="p">,</span> <span class="n">stream</span><span class="p">.</span><span class="n">props</span><span class="p">.</span><span class="n">stream_name</span><span class="p">)</span>
        <span class="n">translation_dict</span><span class="p">[</span><span class="n">description</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>

        <span class="c1"># Process summary
</span>        <span class="n">summary</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="nf">get_summary</span><span class="p">(</span><span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">location</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">{};{};summary</span><span class="sh">"</span><span class="p">).</span><span class="nf">format</span><span class="p">(</span>
            <span class="n">stream</span><span class="p">.</span><span class="n">props</span><span class="p">.</span><span class="n">module_name</span><span class="p">,</span> <span class="n">stream</span><span class="p">.</span><span class="n">props</span><span class="p">.</span><span class="n">stream_name</span><span class="p">)</span>
        <span class="n">translation_dict</span><span class="p">[</span><span class="n">summary</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>

        <span class="c1"># Process profile descriptions(sometimes NULL)
</span>        <span class="n">profile_names</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="nf">get_profile_names</span><span class="p">()</span>
        <span class="nf">if</span><span class="p">(</span><span class="n">profile_names</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">pro_name</span> <span class="ow">in</span> <span class="n">profile_names</span><span class="p">:</span>
                <span class="n">profile</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="nf">get_profile</span><span class="p">(</span><span class="n">pro_name</span><span class="p">)</span>

                <span class="n">profile_desc</span> <span class="o">=</span> <span class="n">profile</span><span class="p">.</span><span class="nf">get_description</span><span class="p">(</span><span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
                <span class="n">location</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">{};{};profile;{}</span><span class="sh">"</span><span class="p">).</span><span class="nf">format</span><span class="p">(</span>
                    <span class="n">stream</span><span class="p">.</span><span class="n">props</span><span class="p">.</span><span class="n">module_name</span><span class="p">,</span> <span class="n">stream</span><span class="p">.</span><span class="n">props</span><span class="p">.</span><span class="n">stream_name</span><span class="p">,</span> <span class="n">pro_name</span><span class="p">)</span>
                <span class="n">translation_dict</span><span class="p">[</span><span class="n">profile_desc</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>

</code></pre></div></div> <p>Now that we have our strings, we simply put them in our babel catalog with their location of occurrences and return it.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">catalog</span> <span class="o">=</span> <span class="nc">Catalog</span><span class="p">(</span><span class="n">project</span><span class="o">=</span><span class="n">project_name</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">translatable_string</span><span class="p">,</span> <span class="n">locations</span> <span class="ow">in</span> <span class="n">translation_dict</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="n">catalog</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">translatable_string</span><span class="p">,</span> <span class="n">locations</span><span class="o">=</span><span class="n">locations</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">catalog</span>
</code></pre></div></div> <h2 id="task-2">Task 2</h2> <blockquote> <p>Retrieve the finished translations and use the libmodulemd API to turn them into modulemd-translations documents.</p> </blockquote> <p><img src="../assets/img/phase2.png" alt="Phase 2"/></p> <p>After Zanata translates our strings, they provide us with a <code class="language-plaintext highlighter-rouge">.po</code> file corresponding to one language. This file is turned back into a <code class="language-plaintext highlighter-rouge">babel catalog</code> so that we can parse the translations and put them into our original <code class="language-plaintext highlighter-rouge">ModulemdIndex</code> object. This file contains headers like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Project-Id-Version: fedora-modularity-translations VERSION\n"
"POT-Creation-Date: 2018-10-16 18:39+0000\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Last-Translator: Geert Warrink &lt;geert.warrink@onsnet.nu&gt;\n"
"Language-Team: Dutch\n"
"Language: nl\n"
"X-Generator: Zanata 4.6.2\n"
</code></pre></div></div> <p>Th input is a list of such <code class="language-plaintext highlighter-rouge">catalogs</code> and our original <code class="language-plaintext highlighter-rouge">ModulemdIndex</code>. We change this <code class="language-plaintext highlighter-rouge">ModulemdIndex</code> object inplace and later this change is reflected into the corresponding <code class="language-plaintext highlighter-rouge">YAML</code> file.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_modulemd_translations_from_catalog</span><span class="p">(</span><span class="n">catalogs</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>
    <span class="bp">...</span>
    <span class="k">return</span> <span class="bp">None</span>
</code></pre></div></div> <p>Creating <code class="language-plaintext highlighter-rouge">ModulemdTranslation</code> objects to be later stored in our <code class="language-plaintext highlighter-rouge">index</code>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="c1"># Dictionary `data` contains information from catalog like:
</span>	<span class="c1"># Key: (module_name, stream_name)
</span>	<span class="c1"># Value: TranslationEntry object of a locale
</span>	<span class="n">data</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">()</span>

	<span class="k">for</span> <span class="n">msg</span> <span class="ow">in</span> <span class="n">catalog</span><span class="p">:</span>
		<span class="k">for</span> <span class="n">location</span><span class="p">,</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">locations</span><span class="p">:</span>
			<span class="p">(</span><span class="n">module_name</span><span class="p">,</span> <span class="n">stream_name</span><span class="p">,</span> <span class="n">string_type</span><span class="p">,</span>
				<span class="n">profile_name</span><span class="p">)</span> <span class="o">=</span> <span class="nf">split_location</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>

			<span class="k">try</span><span class="p">:</span>
				<span class="n">entry</span> <span class="o">=</span> <span class="n">data</span><span class="p">[(</span><span class="n">module_name</span><span class="p">,</span> <span class="n">stream_name</span><span class="p">)]</span>
			<span class="k">except</span> <span class="nb">KeyError</span><span class="p">:</span>
				<span class="n">entry</span> <span class="o">=</span> <span class="n">Modulemd</span><span class="p">.</span><span class="n">TranslationEntry</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
					<span class="nf">str</span><span class="p">(</span><span class="n">catalog</span><span class="p">.</span><span class="n">locale</span><span class="p">))</span>

			<span class="k">if</span> <span class="n">string_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">summary</span><span class="sh">"</span><span class="p">:</span>
				<span class="n">entry</span><span class="p">.</span><span class="nf">set_summary</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">string</span><span class="p">)</span>
			<span class="k">elif</span> <span class="n">string_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span>
				<span class="n">entry</span><span class="p">.</span><span class="nf">set_description</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">string</span><span class="p">)</span>
			<span class="k">else</span><span class="p">:</span>
				<span class="n">entry</span><span class="p">.</span><span class="nf">set_profile_description</span><span class="p">(</span><span class="n">profile_name</span><span class="p">,</span> <span class="n">msg</span><span class="p">.</span><span class="n">string</span><span class="p">)</span>

			<span class="n">data</span><span class="p">[(</span><span class="n">module_name</span><span class="p">,</span> <span class="n">stream_name</span><span class="p">)]</span> <span class="o">=</span> <span class="n">entry</span>
</code></pre></div></div> <p>And now store them in our <code class="language-plaintext highlighter-rouge">index</code>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">for </span><span class="p">(</span><span class="n">module_name</span><span class="p">,</span> <span class="n">stream_name</span><span class="p">),</span> <span class="n">mmd_translation</span> <span class="ow">in</span> <span class="n">translations</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
	<span class="k">try</span><span class="p">:</span>
		<span class="n">ret</span> <span class="o">=</span> <span class="n">index</span><span class="p">.</span><span class="nf">add_translation</span><span class="p">(</span><span class="n">mmd_translation</span><span class="p">)</span>
	<span class="k">except</span> <span class="n">GLib</span><span class="p">.</span><span class="n">Error</span><span class="p">:</span>
		<span class="nf">print</span><span class="p">(</span>
			<span class="sh">"</span><span class="s">The translation for this %s:%s could not be added</span><span class="sh">"</span><span class="p">,</span>
			<span class="n">module_name</span><span class="p">,</span>
			<span class="n">stream_name</span><span class="p">)</span>

</code></pre></div></div> <h3 id="pr-merged-2-months-2-tasks-completed-we-were-right-on-time-till-now">PR merged! 2 months, 2 tasks completed, we were right on time till now!</h3> <h2 id="task-3">Task 3</h2> <blockquote> <p>Include the code from Phase 2 into Fedora‚Äôs repo creation automation so that it gets updated automatically every day.</p> </blockquote> <p><img src="../assets/img/phase3.png" alt="Phase 3"/></p> <p>Till now everything were just functions being called on static files. Now we would pull actual <code class="language-plaintext highlighter-rouge">YAMLs</code> from fedora‚Äôs repo creation tool, <code class="language-plaintext highlighter-rouge">Koji</code>, and then apply the process to obtain translations. I have created a CLI Tool so that individual release translations can be manually added to their respective <code class="language-plaintext highlighter-rouge">modulemd YAML</code> metadata. But to include these translations into the main release is still a work-in-progress.</p> <p>As of now, I‚Äôm a maintainer for the Modulemd Translation Helpers repository for Fedora. You can check it out <a href="https://github.com/fedora-modularity/ModulemdTranslationHelpers#modulemdtranslationhelpers">here</a>.</p> <h2 id="wrapping-up">Wrapping up</h2> <p>I still have a long way to go, but my learning curve is only getting better. I will write thorough documentation for all of my work after the completion of my project. I also presented my Outreachy project at the annual Fedora developer conference, <a href="https://flocktofedora.org/">Flock to Fedora</a> in 2019 at Budapest, Hungary. You can access the slides used for the presentation <a href="https://docs.google.com/presentation/d/1-f8p3xIJwZBc73KphAZncSC4Ykz9Zpy4eKr76_qBNts/edit?ts=5d417262#slide=id.g5ee093febd_0_32">here</a>.</p> <p>Hence proved, Outreachy is truly a rewarding experience! I hope you‚Äôd like to immerse yourself into this wonderful weather @ Fedora where the sun is about to shine soon üå¶Ô∏è.</p> <p><em>Fin.</em></p>]]></content><author><name></name></author><category term="open-source"/><category term="open source"/><category term="outreachy"/><category term="technology"/><category term="gsoc"/><category term="research"/><category term="python"/><category term="jekyll"/><category term="fedora"/><category term="modularity"/><summary type="html"><![CDATA[Progress report for my Outreachy project at Fedora Modularity]]></summary></entry><entry><title type="html">Small risks, BIG impact: Go-Squad!</title><link href="https://orionstar25.github.io/blog/2019/gojek/" rel="alternate" type="text/html" title="Small risks, BIG impact: Go-Squad!"/><published>2019-07-16T00:00:00+00:00</published><updated>2019-07-16T00:00:00+00:00</updated><id>https://orionstar25.github.io/blog/2019/gojek</id><content type="html" xml:base="https://orionstar25.github.io/blog/2019/gojek/"><![CDATA[<blockquote> <p><em>Us CS undergrads,</em> <br/> <em>We‚Äôre a nasty bunch.</em> <br/> <em>Drooling over stickers and swags,</em> <br/> <em>Rolling out code in a time crunch.</em> <br/> <em>We seek internships that provide</em> <br/> <em>experience and comfort</em> <br/> <em>Impactful projects that feed our inner nerd.</em> <br/> <em>At GoJek, all this magic will come true</em> <br/> <em>Experience it first-hand and you‚Äôll never have monday blues!</em></p> </blockquote> <p>I was selected as a GoJek intern on 11 August, 2018 as part of my campus internship drive at IIIT Allahabad. GoJek‚Äôs candidate selection process had a stark difference from every other company that came to the campus:</p> <ol> <li>Shortlist candidates on the basis of <strong>open source contributions</strong> and/or major projects built apart from coursework.</li> <li>A <strong>code-pairing round</strong>: We were paired with a mentor from GoJek and given a highschool level application to build in a span of 2 hours.</li> <li>Technical interview</li> <li>HR interview</li> </ol> <p>When you‚Äôre weighing your options for a summer internship, it‚Äôs easy to gravitate toward a big-name company. But there‚Äôs a lot to be gained by working for a startup, especially when you‚Äôre first making your entrance into the workforce. My internship started in the summer of 2019 on May 27th. <strong>I worked on two different projects pertaining to two different tech stacks in a span of two months.</strong> That‚Äôs how crazy my learning curve was!</p> <p><img src="https://cdn-images-1.medium.com/max/1600/1*EqK0CSTnQhBAVAZOIbqFdg.jpeg" alt="startup"/></p> <h4 id="two-minds-are-better-than-one">Two minds are better than one!</h4> <p>In GoJek, we heavily depend on <strong>pair-programming</strong>. Throughout my internship, I have paired various times with my fellow interns which has only resulted in much faster and robust results. My first project was to add features to a slackbot, called <strong>GoBot</strong>. This bot was aimed at increasing the developer efficiency of Gojek by automating the on-boarding process of a new GoJek joinee. We added functionalities such as:</p> <ol> <li>Invite users to team-specific channels.</li> <li>Give <code class="language-plaintext highlighter-rouge">knightswatch</code> access for various services to individuals based on their team and role.</li> </ol> <p><img src="https://drive.google.com/uc?export=view&amp;id=1bFD9kC0NXB3ELdav6X4XgFEZObPFub4c" alt="gobot"/></p> <p>We also planned to integrate <code class="language-plaintext highlighter-rouge">PagerDuty</code> and <code class="language-plaintext highlighter-rouge">New Relic</code> with GoBot but unfortunately couldn‚Äôt due to authorization and access issues. This project, hence was completed in about 3.5 weeks. I got to learn about Golang (language in which the bot is written), unit testing, network servers, curl requests, and REST APIs.</p> <p>After this, we started work on our second project <strong>Go-Triage</strong>. GoJek‚Äôs recruitement process consists of two stages:</p> <ol> <li><strong>Code triaging</strong>: A basic hygiene check validating that the submission is in accordance with GoJek standard.</li> <li><strong>Code review</strong>: GoJek developers review the code and shortlist candidates for interview.</li> </ol> <p>The triaging process has been fairly manual up till now. Recruiters check for various parameters in a submission and forward it to the developers if all checks pass. Otherwise they contact the candidate via email to correct their solution and submit again. Hence, we built a portal to automate the triaging process!</p> <ol> <li>Select a compressed file(<code class="language-plaintext highlighter-rouge">.zip</code> or <code class="language-plaintext highlighter-rouge">.tar</code>) to submit.</li> <li>Select the language of your submission.</li> <li>Click on <code class="language-plaintext highlighter-rouge">upload</code>, sit back, and relax!</li> </ol> <p>Our code inspects and runs the submission in the given language, and finally produces a triage report stating what all checks have passed and failed. Therefore, a to-and-fro process which once took about 2-3 weeks to complete, now finishes in a matter of 3 mouse clicks! Since we built this project from scratch, it gave us maximum flexibility to experiment with possibilities. There were 4 iterations to this project:</p> <ol> <li><strong>V1:</strong> Build a CLI tool to automate the triage process.</li> <li><strong>V2:</strong> Pull language-specific dockers that will create a container environment for each submission to run in.</li> </ol> <p><img src="https://drive.google.com/uc?export=view&amp;id=1AIzB9ZgWslqRpbnItDR2VZrFUsnBHQZw" alt="cli"/></p> <ol> <li><strong>V3:</strong> Build a frontend dashboard that will help the recruiters use our <code class="language-plaintext highlighter-rouge">V2</code> CLI tool with ease. That way, they will just have to send the summary table back to the candidates.</li> </ol> <p><img src="https://drive.google.com/uc?export=view&amp;id=1pUgyt-kJe_1ynIAkZagOK0eNkcFNpQB8" alt="frontend"/></p> <ol> <li><strong>V4:</strong> Deploy the portal on a public IP so that candidates can use it themselves and get instant feedback. This meant better UI, authorization to prevent malicious submissions, and not jeopardise GoJek‚Äôs entire system üôÇ</li> </ol> <p><img src="https://drive.google.com/uc?export=view&amp;id=1e5ZsmB26P_FUUxfvB67nisNUAJ92GbUG" alt="new"/></p> <p>I learnt about Ruby (main language for our backend), test-driven development, Dockers, Nodejs, and Bootstrap. The technical curve for both the project was high. Along the way, we also learnt valuable lessons such as not to get too ‚Äúbound‚Äù to your code. You‚Äôll probably write more efficient code in the second iteration anyway. There was heavy usage of version control (which I love), and as our tech lead said once:</p> <blockquote> <p>These projects have low risk and high impact!</p> </blockquote> <p>Needless to say, I‚Äôm very proud of our end product. üòç</p> <h4 id="culturally-fit--gojek">Culturally-fit @ GoJek</h4> <p>GoJek <em>really</em> likes to take care of their employees (even interns). We were spoilt heavily for these 2 months and we just couldn‚Äôt say no! My to-and-fro flights, accommodation and food were all paid and taken care of for the entire duration of my internship by GoJek. We were also given a Macbook Pro upon arrival.</p> <p>As an intern for a large company, your exposure is often limited to the small portion that you‚Äôre working on directly. With hundreds of interns and thousands of employees, there‚Äôs no way to effectively expose yourself to all aspects of the business. But in GoJek, it‚Äôs almost impossible not to. Our projects required us to go beyond our 3-member team so frequently, the amount of exposure and awareness we received was precious.</p> <ol> <li>The <strong>Go-Food</strong> team was our go-to for any doubts regarding integration, code structures, dockers, etc.</li> <li>We sat with the <strong>recruiters</strong> to understand our problem statement for Go-Triage better.</li> <li>We were aquainted with team <strong>Magneto</strong> who were working on another recruitment based problem and discussed their approach.</li> <li>We collaborated with the <strong>Design</strong> team for our frontend.</li> <li>Finally, we had long sessions with the <strong>Security</strong> team to make our project robust and remove vulnerabilities.</li> </ol> <h5 id="design-team-working-on-rebranding-of-the-gojek-logo"><em>Design team working on rebranding of the GoJek logo</em></h5> <p><img src="https://drive.google.com/uc?export=view&amp;id=1y4n78wkv6g2bvhYkXRd05KiKTHUfnLEk" alt="Design Team"/></p> <p>Hence, somewhere in between regular cafeteria journeys, team outings, movie nights, awesome lunches, foosball tournaments, stickers, swags, flexible working hours, great office vibes, daily standups, numerous induction sessions, all-hands sessions, demos, open source collaborations ‚Ä¶‚Ä¶ (ah, the list is wayy too long!) WE FELL IN LOVE WITH THIS PLACE! ‚ù§Ô∏è</p> <p>It was definitely one of my best and most productive summer, and I‚Äôm extremely excited to join them next year!</p> <p>P.S.: Do look at me hard at work. :) I won 10-0. <img src="https://drive.google.com/uc?export=view&amp;id=1AQNn4gWIyc9EiCcSzg30nzb1zaesO4hi" alt="drawing" style="width:50%"/></p>]]></content><author><name></name></author><category term="open source"/><category term="internship"/><category term="technology"/><category term="gojek"/><category term="development"/><category term="python"/><category term="jekyll"/><category term="startup"/><category term="golang"/><category term="ruby"/><summary type="html"><![CDATA[Dive into my internship experience at GoJek, where you can make a change in any way possible!]]></summary></entry><entry><title type="html">The Darker part of the Internet</title><link href="https://orionstar25.github.io/blog/2019/the-darker-part-of-the-internet/" rel="alternate" type="text/html" title="The Darker part of the Internet"/><published>2019-07-08T00:00:00+00:00</published><updated>2019-07-08T00:00:00+00:00</updated><id>https://orionstar25.github.io/blog/2019/the-darker-part-of-the-internet</id><content type="html" xml:base="https://orionstar25.github.io/blog/2019/the-darker-part-of-the-internet/"><![CDATA[<p>Does your inner ethical hacker want to break the next matrix? Do you also feel completely indispensible by using ‚ÄúIncognito Mode‚Äù while internet surfing? Sadly, you‚Äôre still not as ‚Äúanonymous‚Äù as you thought.</p> <p>The incognito mode allows receiving ‚Äúanonymous‚Äù cookies that cannot be linked to one‚Äôs identity. However, if one logs back into Google before leaving Incognito Mode, Google will be able to retroactively link their browsing data to their account. This works by taking the previously anonymous cookies and then associating them with their Google account.</p> <p>That‚Äôs where comes the Dark Web. And its NOT the same as the Deep Web.</p> <p><img src="https://stardiariesweb.files.wordpress.com/2017/04/dark-web.jpg" alt="darkweb"/></p> <p><a href="https://encyclopediadramatica.se/index.php?diff=prev&amp;oldid=400213&amp;title=Deep_web">Deep Web</a> is simply the content of databases and other web services that cannot be indexed by conventional search engines. Whereas <a href="https://encyclopediadramatica.se/index.php?diff=prev&amp;oldid=400213&amp;title=Deep_web">Dark Web</a> is an encrypted network that exists between <a href="https://www.torproject.org/about/overview">Tor (formerly known as The Onion Router)</a> servers and their clients. Using Tor‚Äôs software makes it difficult, if not impossible, for any snoops to see your web mail, search history or other online activities. Your traffic is routed from your computer and through an onion-like layer of servers. Furthermore, the IP addresses of darknet services are hidden so that their hosts cannot be traced. This can proves highly useful for journalists, activists and business people.</p> <p><img src="https://media.springernature.com/original/springer-static/image/chp%3A10.1007%2F978-3-030-01659-3_45/MediaObjects/471865_1_En_45_Fig2_HTML.png" alt="Tor"/></p> <p>The dark web holds everything sweet and sour. Many websites in the deep web are not legal to visit (child pornography, snuff films, torture flicks, etc.). These websites often change addresses frequently and require massive effort in order to find them. Because of the nature of these websites, their visitors are monitored. Although law enforcement may do their best to have these websites shut down, the deep web is under no legal jurisdiction (hence, the reason for the deep web‚Äôs existence). The largest darknet market remains the The Silk Road 3.0, the ‚ÄòeBay of drugs‚Äô being an anonymous platform for selling illegal drugs. What sustains these markets‚Äô existence is ‚Äì <a href="https://bitcoin.org/en/">BITCOINS</a>. <strong>Bitcoin</strong> is both a crypto-currency and an electronic payment system invented by an unidentified programmer, or group of programmers, under the name of Satoshi Nakamoto. But here‚Äôs the catch! It‚Äôs value is highly dynamic in nature, or as experts like to say- a bubble.</p> <p><img src="https://2.bp.blogspot.com/-XNTCtEiPrvU/WS48N716KnI/AAAAAAAAMFY/-imLxGYUNF01l6gR4WOo6CpVLBR5IYkKACLcB/s1600/bitcoin%2Bdynamic%2Bequilibrium%2B1.png" alt="Bitcoin"/></p> <p>In conclusion, even if your purpose of using the dark web is purely curiosity, you‚Äôre a lot more in danger than not. Get ready to come across real drug dealers, satanic cults, hitmans for takeaways, and people selling just carrots only to earn some bitcoins! Here are a list of links that will help you find interesting <code class="language-plaintext highlighter-rouge">.onion</code> URLs:-</p> <ul> <li><a href="http://thehiddenwiki.org/">Hidden Wiki: Tor .onion urls directories</a></li> <li><a href="http://the-hidden-wiki.com/">HiddenWiki Deep Web Links</a></li> <li><a href="https://www.reddit.com/r/TOR/comments/2mxqdp/the_uncensored_hidden_wiki_is_up/">The uncensored hidden wiki is up</a></li> </ul> <p>But again, the deep web is not a tourist place. Stay anonymous, stay safe.</p> <p>P.S.: Some real-life darkweb experiences:</p> <blockquote> <p><strong>‚ÄúI downloaded TOR and within 20 minutes of downloading it and browsing random crap I got a phone call but there was no one there and they just hung up after 10 seconds. I didn‚Äôt even know if it was legal at the time so that was enough to freak me out and I stopped right there.‚Äù</strong></p> </blockquote> <blockquote> <p><strong>Silk Road. Circa 2013. Purchased what was promised as a ‚Äúmind-blowing‚Äù experience. Received a Dust Buster two days later. Strangely, no complaints on my end.</strong></p> </blockquote> <blockquote> <p><strong>There was a german man selling pretzels, just pretzels.</strong></p> </blockquote>]]></content><author><name></name></author><category term="dark web"/><category term="deep web"/><category term="tor"/><category term="network security"/><category term="jekyll"/><summary type="html"><![CDATA[Unravel great depths of the Internet, literally]]></summary></entry><entry><title type="html">Let‚Äôs hunt those Memory Leaks!</title><link href="https://orionstar25.github.io/blog/2019/outreachy-week-3/" rel="alternate" type="text/html" title="Let‚Äôs hunt those Memory Leaks!"/><published>2019-06-05T00:00:00+00:00</published><updated>2019-06-05T00:00:00+00:00</updated><id>https://orionstar25.github.io/blog/2019/outreachy-week-3</id><content type="html" xml:base="https://orionstar25.github.io/blog/2019/outreachy-week-3/"><![CDATA[<p>We‚Äôre into week 4 of Outreachy! And just when I thought I was <em>finally</em> getting the hang of Modularity‚Äôs codebase, I ran into something I‚Äôve dreaded my entire life: Segmentation faults, runtime errors, AND MEMORY LEAKS!</p> <p>I do know that when we allocate memory for variables, we should free them after we‚Äôre done to avoid any memory leaks. You all might know already about the <strong>Automatic garbage collection in Java</strong></p> <blockquote> <p>Java Memory Management, with its built-in garbage collection, is one of the language‚Äôs finest achievements. It allows developers to create new objects without worrying explicitly about memory allocation and deallocation, because the garbage collector automatically reclaims memory for reuse.</p> </blockquote> <p>But this is not the case with Object C in which I was working on for a certain PR. So as a methodical approach, I initialized objects, and made sure they got dereferenced once they were out of scope. And then I ran the tests.</p> <h3 id="fail"><strong>FAIL</strong></h3> <p>I ran into a segmentation error I JUST COULDN‚ÄôT TRACE! I ran certain tests individually. I ran a <code class="language-plaintext highlighter-rouge">GDB</code> debugger and traced, backtraced, checked my stack, added breakpoints, and possibly tried other <code class="language-plaintext highlighter-rouge">GDB</code> options, but all in vain! After possibly being stuck at this for about half a day, I turned to my mentor(Stephan) on IRC.</p> <p>Something that I must point out before I venture into what resources Stephan pointed me towards, that ultimately helped me solve this issue.</p> <ol> <li> <p>Asking doubts on IRC <strong>IS</strong> definitely intimidating. They‚Äôre usually public channels and the thought that someone might be silently judging me for asking stupid questions has crossed my mind a million times.</p> </li> <li> <p>But over the years, I‚Äôve become a little less ashamed of what I don‚Äôt know, and ask because I‚Äôll b receiving knowledge in return.</p> </li> <li> <p>But just sometimes, I ask questions in haste only to realize I knew the answer already. <em>hehe</em></p> </li> </ol> <p>Basically kids, ask your questions after you know you‚Äôve thought through possible answers yourselves. No one in an open source community will ever deny you facts and resources. But if you ask your doubts with context to what you have tried, and eventually failed, others will know you‚Äôre genuinely trying to solve an issue.</p> <p>Anyway, I still feel my mentor is mini-Google and so I‚Äôm in luck (Thanks a lot, sir) :D</p> <h2 id="the-victim-pr">The victim PR</h2> <p>This PR made me understand the niti-gritties of memory management techniques: <a href="https://github.com/fedora-modularity/libmodulemd/pull/313">Add modulemd_get_stream_names()</a></p> <p>I was supposed to write a function that took a Modulemd.Module object as an input, and gave as output an ordered list of names of all the streams present in that module.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Iterate through all the streams <span class="k">in </span>module:
	Store each stream name <span class="k">in </span>a <span class="nb">set

</span>Sort <span class="nb">set </span>alphabetically
Return <span class="nb">set</span>	
</code></pre></div></div> <p>Streams are stored as a <code class="language-plaintext highlighter-rouge">GPtrArray</code> in a <code class="language-plaintext highlighter-rouge">module</code> object. The data structure needed for the <code class="language-plaintext highlighter-rouge">set()</code> as in the psuedocode was a <code class="language-plaintext highlighter-rouge">GHashtable</code>. This is so that this set can be fed into an ordering(sorting) function later.</p> <p>So I initialised a <code class="language-plaintext highlighter-rouge">GHashtable</code> with the name <code class="language-plaintext highlighter-rouge">stream_names</code>.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GHashtable <span class="k">*</span>stream_names <span class="o">=</span> NULL<span class="p">;</span>
</code></pre></div></div> <p>And there were two mistakes here:</p> <ol> <li>I created a pointer to <code class="language-plaintext highlighter-rouge">GHashtable</code>, and not the hash table itself. We can think of it as initializing an array in C, but not using <code class="language-plaintext highlighter-rouge">malloc()</code> to allocate memory for it.</li> <li>I never freed the hash table.</li> </ol> <h3 id="lesson-1">Lesson 1</h3> <ol> <li> <p><code class="language-plaintext highlighter-rouge">(transfer full)</code> on a container type (GPtrArray, GArray and GHashTable) tells the binding: ‚ÄúYou are responsible for freeing the array container and all of its members‚Äù.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">(transfer container)</code> on a container type tells it: ‚ÄúYou only need to free the container itself. The elements are handled elsewhere.‚Äù</p> </li> </ol> <p>So if I initialise a <code class="language-plaintext highlighter-rouge">GPtrArray</code>, store array elements in it, and de-allocate memory later, the array lets me set a function to be called on each element when the array itself is freed. Which means I don‚Äôt need to individually free the elements manually. I just call <code class="language-plaintext highlighter-rouge">g_ptr_array_unref()</code> and it will also clean up the array contents.</p> <p>Hence, now my code becomes:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> g_autoptr <span class="o">(</span>GHashTable<span class="o">)</span> stream_names <span class="o">=</span>
    g_hash_table_new _full<span class="o">(</span>g_str_hash, g_str_equal, g_free, NULL<span class="o">)</span><span class="p">;</span>

<span class="k">for</span> <span class="o">(</span>guint i <span class="o">=</span> 0<span class="p">;</span> i &lt; self-&gt;streams-&gt;len<span class="p">;</span> i++<span class="o">)</span>
    <span class="o">{</span>
      g_hash_table_add <span class="o">(</span>stream_names,
                        <span class="o">(</span>void <span class="k">*</span><span class="o">)</span>modulemd_module_stream_get_stream_name <span class="o">(</span>
                          g_ptr_array_index <span class="o">(</span>self-&gt;streams, i<span class="o">)))</span><span class="p">;</span>
    <span class="o">}</span>
</code></pre></div></div> <ol> <li> <p><code class="language-plaintext highlighter-rouge">g_hash_table_new_full()</code> allows to create and allocate memory for a hash table container. <code class="language-plaintext highlighter-rouge">g_str_equal</code> specifies that the keys of this hash table need to be unique. <code class="language-plaintext highlighter-rouge">g_free</code> de-allocates memory for the keys. Since we don‚Äôt have values for keys, <code class="language-plaintext highlighter-rouge">NULL</code> is provided as no memory de-allocation is required.</p> </li> <li> <p>By using <code class="language-plaintext highlighter-rouge">g_autoptr()</code>, it will cause the compiler to automatically call <code class="language-plaintext highlighter-rouge">g_hash_table_unref()</code> on it when it goes out of scope.</p> </li> </ol> <p>One problem solved!</p> <p>And now we come to a second, BIGGER problem! My next failure point was that I was getting an error message for a function I wasn‚Äôt even using! I couldn‚Äôt even trace it back to how this function was being called. That‚Äôs when Stephan decided to walk me through this hurdle together.</p> <h3 id="reproducing-the-error">Reproducing the error</h3> <p>Observations, assumptions, and steps along the way:</p> <ol> <li> <p>Error messages may be coming from another test. The logs sometimes show expected failures, such as tests to make sure we gracefully handle bad input.</p> </li> <li>Ran just the new test, so we don‚Äôt have to debug any of the other tests. <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>meson <span class="nb">test</span> <span class="nt">--print-errorlogs</span> module_v2_debug <span class="nt">--test-args</span> <span class="s2">"-p /modulemd/v2/module/stream_names"</span>
</code></pre></div> </div> <p>There was no mention of the assertion failure. That‚Äôs because that error comes from a different test.</p> </li> <li>Next, we ran the Valgrind checks. These checks detect any kinds of memory leaks and runtime errors. <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>meson <span class="nb">test</span> <span class="nt">--wrap</span><span class="o">=</span><span class="s2">"valgrind --leak-check=full"</span> <span class="nt">--print-errorlogs</span> module_v2_debug <span class="nt">--test-args</span> <span class="s2">"-p /modulemd/v2/module/stream_names"</span>
</code></pre></div> </div> <p>The error logs were clearly divided into 3 distinct sections:</p> <ul> <li>The location the error was detected.</li> <li>The location where the memory being accessed was previously freed.</li> <li>The location where it was originally allocated.</li> </ul> </li> </ol> <p>The output was:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>free<span class="o">()</span>: double free detected <span class="k">in </span>tcache 2
invalid free<span class="o">()</span> detected
</code></pre></div></div> <p>This meant that there were no memory <em>leaks</em>, but there were memory <em>errors</em>. We need to have the same number of free()/unref() calls as we do allocations/ref()s. But somewhere, <strong>an extra free() was being called for memory that was already freed!</strong></p> <p>Now that the exact error was detected, it was time to tackle it!</p> <h3 id="transcending-towards-nirvana">Transcending towards Nirvana</h3> <p>Coming back to this piece of code:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> g_autoptr <span class="o">(</span>GHashTable<span class="o">)</span> stream_names <span class="o">=</span>
    g_hash_table_new _full<span class="o">(</span>g_str_hash, g_str_equal, g_free, NULL<span class="o">)</span><span class="p">;</span>
</code></pre></div></div> <p>In the function <code class="language-plaintext highlighter-rouge">g_hash_table_new_full()</code>:</p> <ol> <li>There were no values. Hence the <code class="language-plaintext highlighter-rouge">NULL</code>.</li> <li>But keys needed a way to get freed. Hence, the <code class="language-plaintext highlighter-rouge">g_free()</code> on each key.</li> <li>But because we‚Äôre using <code class="language-plaintext highlighter-rouge">g_autoptr()</code>, it will free it on its own. Hence, that‚Äôs a double free.</li> </ol> <p>So, to correct the error, in the function <code class="language-plaintext highlighter-rouge">g_hash_table_new_full()</code> I assigned <code class="language-plaintext highlighter-rouge">NULL</code> to both the ways of freeing the keys and values.</p> <p><strong>However, the solution was right but my reason was WRONG.</strong></p> <p>This approach is correct and makes sense <strong>if the hash table owns the memory of its keys</strong>. However, when I added the keys with <code class="language-plaintext highlighter-rouge">g_hash_table_add()</code>, I added the return value of <code class="language-plaintext highlighter-rouge">modulemd_module_stream_get_stream_name()</code> to it directly. Looking at the definition of <code class="language-plaintext highlighter-rouge">modulemd_module_stream_get_stream_name()</code>, its <code class="language-plaintext highlighter-rouge">transfer</code> value was <code class="language-plaintext highlighter-rouge">none</code>. This means that the function doesn‚Äôt transfer any ownership of elements, but only their values. So the caller must not <code class="language-plaintext highlighter-rouge">free()</code> it.</p> <p>There are wo ways of resolving this problem:</p> <ol> <li> <p>You can <code class="language-plaintext highlighter-rouge">g_strdup()</code> the string into the GHashTable, making a copy of it that you can free. Copying the memory and then allowing the GHashTable to free it is safer if there‚Äôs a chance that the memory it‚Äôs pointing to could be changed before you need it for something. But it comes at the performance cost of having to do a memory allocation.</p> </li> <li> <p>You can drop the free function from the hash initialization.</p> </li> </ol> <p>So the next question: <strong>Where do we use the stream names in this function?</strong></p> <p>We add them to the <code class="language-plaintext highlighter-rouge">GHashtable</code> and then consume those keys to create an ordered set. By looking at the implementation of <code class="language-plaintext highlighter-rouge">modulemd_ordered_str_keys_as_strv()</code>, we notice:</p> <ol> <li> <p>It explicitly makes a <code class="language-plaintext highlighter-rouge">g_strdup()</code> of the strings when adding them to the array.</p> </li> <li> <p>So the data coming back from <code class="language-plaintext highlighter-rouge">modulemd_ordered_str_keys()</code> is not pointing at the original GHashTable internal values, but has its own memory.</p> </li> <li> <p>This means that <code class="language-plaintext highlighter-rouge">modulemd_module_get_stream_names_as_strv()</code> can safely return it as-is, because it‚Äôs not coupled to the stream_names GHashTable <em>or</em> the underlying ModuleStream object.</p> </li> <li> <p>It‚Äôs fresh and can be passed back as <code class="language-plaintext highlighter-rouge">(transfer full)</code> safely.</p> </li> <li> <p>So, since that function is returning memory that is fully self-contained, it‚Äôs safe to return it. Since nothing will change it underneath us and the API consumer can hold onto it however long they need to.</p> </li> </ol> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GPtrArray <span class="k">*</span>
modulemd_ordered_str_keys <span class="o">(</span>GHashTable <span class="k">*</span>htable, GCompareFunc compare_func<span class="o">)</span>
<span class="o">{</span>
  ...

  <span class="k">while</span> <span class="o">(</span>g_hash_table_iter_next <span class="o">(</span>&amp;iter, &amp;key, NULL<span class="o">))</span>
    <span class="o">{</span>
      g_ptr_array_add <span class="o">(</span>keys, g_strdup <span class="o">((</span>const gchar <span class="k">*</span><span class="o">)</span>key<span class="o">))</span><span class="p">;</span>
    <span class="o">}</span>
  ...

  <span class="k">return </span>keys<span class="p">;</span>
<span class="o">}</span>
</code></pre></div></div> <p>Hence, since we already have a generalized layer that makes a copy and returns a fully self-contained value, we wouldn‚Äôt need to make a copy in our <code class="language-plaintext highlighter-rouge">get_stream_names()</code> method. And so making the copy there would be harmless but wasteful. As a general policy, if you‚Äôre ever <em>unsure</em> if the memory is going to change on you, make the copy. As a general policy, if you‚Äôre ever <em>unsure</em> if the memory is going to change on you, make the copy. But in this case, we can prove that it won‚Äôt, so we don‚Äôt need to.</p> <p>With this analysis, we reach to the conclusion that the first solution is good enough (assigning NULL for freeing values). To which Stephan replied:</p> <blockquote> <sgallagh> Not just "good enough" but, as we have just explored, it's the best answer! </sgallagh> </blockquote> <p>Hence, my final method looked like this!</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GStrv
modulemd_module_get_stream_names_as_strv <span class="o">(</span>ModulemdModule <span class="k">*</span>self<span class="o">)</span>
<span class="o">{</span>
  g_return_val_if_fail <span class="o">(</span>MODULEMD_IS_MODULE <span class="o">(</span>self<span class="o">)</span>, NULL<span class="o">)</span><span class="p">;</span>

  <span class="k">if</span> <span class="o">(!</span>self-&gt;streams<span class="o">)</span>
    <span class="k">return </span>NULL<span class="p">;</span>

  g_autoptr <span class="o">(</span>GHashTable<span class="o">)</span> stream_names <span class="o">=</span>
    g_hash_table_new <span class="o">(</span>g_str_hash, g_str_equal<span class="o">)</span><span class="p">;</span>

  <span class="k">for</span> <span class="o">(</span>guint i <span class="o">=</span> 0<span class="p">;</span> i &lt; self-&gt;streams-&gt;len<span class="p">;</span> i++<span class="o">)</span>
    <span class="o">{</span>
      g_hash_table_add <span class="o">(</span>stream_names,
                        <span class="o">(</span>void <span class="k">*</span><span class="o">)</span>modulemd_module_stream_get_stream_name <span class="o">(</span>
                          g_ptr_array_index <span class="o">(</span>self-&gt;streams, i<span class="o">)))</span><span class="p">;</span>
    <span class="o">}</span>

  <span class="k">return </span>modulemd_ordered_str_keys_as_strv <span class="o">(</span>stream_names<span class="o">)</span><span class="p">;</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="fin">Fin.</h3>]]></content><author><name></name></author><category term="open-source"/><category term="open source"/><category term="outreachy"/><category term="technology"/><category term="gsoc"/><category term="research"/><category term="python"/><category term="jekyll"/><category term="fedora"/><category term="modularity"/><summary type="html"><![CDATA[I learn more when I make mistakes]]></summary></entry><entry><title type="html">Language is a bridge, not a barrier</title><link href="https://orionstar25.github.io/blog/2019/outreachy-week-5/" rel="alternate" type="text/html" title="Language is a bridge, not a barrier"/><published>2019-06-05T00:00:00+00:00</published><updated>2019-06-05T00:00:00+00:00</updated><id>https://orionstar25.github.io/blog/2019/outreachy-week-5</id><content type="html" xml:base="https://orionstar25.github.io/blog/2019/outreachy-week-5/"><![CDATA[<p>This post explains my Outreachy project with Fedora Modularity in greater depth.</p> <p>I‚Äôm going to start with the basics. This flow of information in this blog post, also happens to be the order in which I learnt about Fedora and ultimately my project.</p> <h3 id="what-is-fedora">What is Fedora?</h3> <p><a href="https://getfedora.org/">Fedora</a> is a Linux distribution developed by the community-supported <a href="https://start.fedoraproject.org/">Fedora Project</a> and sponsored by <a href="https://www.redhat.com/en">Red Hat</a>. Currently, three different editions of Fedora are currently available:</p> <ol> <li><strong>Workstation</strong>, focused on the personal computer,</li> <li><strong>Server</strong> for servers,</li> <li><strong>Atomic</strong> focused on cloud computing.</li> </ol> <blockquote> <p>As of February 2016, Fedora has an estimated 1.2 million users, including Linus Torvalds, creator of the Linux kernel.</p> </blockquote> <h3 id="what-is-fedora-modularity">What is Fedora Modularity?</h3> <p>The Fedora Project has a set of technologies called Fedora Modularity whose purpose is to allow you to be able to ‚Äúswap out‚Äù portions of the available package set in the Fedora Linux Distribution. Modularity introduces a new optional repository to Fedora called Modular that ships additional versions of software on independent life cycles. <strong>This enables users to keep their operating system up-to-date while having the right version of an application for their use case, even when the default version in the distribution changes.</strong></p> <p><img src="https://user-images.githubusercontent.com/28835849/58980334-b4b0df00-87ed-11e9-99dd-58729bd733be.png" alt="modularity"/></p> <h4 id="too-fast-vs-too-slow">Too fast vs. too slow</h4> <p>Modularity solves the <em>‚ÄúToo Fast / Too Slow Problem‚Äù</em>. Different users have different needs. Everyone wants their OS to be stable and change nothing except for 5 things that need to always be the latest version:</p> <ol> <li>Module (N)</li> <li>Stream (S)</li> <li>Version (V)</li> <li>Context (C)</li> <li>Architechure (A)</li> </ol> <p>This is the metadata of a module. An example module would be:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>name: nodejs
stream: 8
version: 20180816123422
context: 6c81f848
arch: x86_64
</code></pre></div></div> <p>This NSVCA is never the same between different users. The module metadata is written and stored as a <code class="language-plaintext highlighter-rouge">YAML</code> document, which <code class="language-plaintext highlighter-rouge">libmodulemd</code>, a helper library for Modularity, exists to read, parse, modify and output.</p> <table> <thead> <tr> <th style="text-align: left">Too fast</th> <th style="text-align: right">Too slow</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">System administrators often want stability for long periods of time.</td> <td style="text-align: right">Developers often want the latest version of softwares.</td> </tr> </tbody> <tbody> <tr> <td style="text-align: left">Fedora generally ships the latest stable versions of its component packages when it is released <strong>twice per year</strong>. That is convenient for desktop users and developers.</td> <td style="text-align: right">CentOS targets long-term stability and releases a new version <strong>once every few years</strong>. This is convenient for server administrators as there are fewer changes over longer periods of time.</td> </tr> </tbody> <tfoot> <tr> <td style="text-align: left">Some Fedora upstreams release their software faster than twice a year. This can be an issue for Fedora servers because it is sometimes necessary to have a stable version of certain packages for a longer period, mostly because of third-party applications.</td> <td style="text-align: right">CentOS‚Äôs issue is that some of the software gets too old for modern applications, and newer versions might be needed.</td> </tr> </tfoot> </table> <p rules="groups">In other words, it would be convenient to be able to choose some parts of the system to update infrequently, while other parts update at a faster pace.</p> <h3 id="what-are-translation-tools">What are translation tools?</h3> <p>Another of Fedora‚Äôa project called the <a href="https://fedoraproject.org/wiki/L10N"><strong>Fedora Localization Project (FLP)</strong></a> has the goal to bring everything around Fedora (the Software, Documentation, Websites, and culture) closer to local communities (countries, languages and in general cultural groups).</p> <blockquote> <p>Also called the <strong>L10N</strong> (an abbreviation of the term ‚ÄúLocalization‚Äù. replace the middle letters of a word (in case ‚Äòocalizatio‚Äô) by naming the number of letters between the first and last letter of that word (in case 10)</p> </blockquote> <p>Fedora uses a translation tools like Zanata where we can push the English strings and translators from around the world can produce translated versions of them.</p> <h3 id="what-is-my-project">What is my project?</h3> <p>Initially, my Outreachy project was titled: <code class="language-plaintext highlighter-rouge">Extend unit tests for libmodulemd</code>. Well, that seems pretty straightforward. But then,</p> <p><em>On IRC one day, having a chat with my mentor</em></p> <blockquote> <p>sgallagh: So I was wondering how you would feel if I offered you a different, slightly harder (but more well-defined) task.</p> </blockquote> <p><strong>BAMM!</strong></p> <p>So here‚Äôs what I‚Äôm doing now! :O</p> <ol> <li> <p>On Fedora, we have <code class="language-plaintext highlighter-rouge">dnf</code> for package management. <code class="language-plaintext highlighter-rouge">dnf</code> has many subcommands, including <code class="language-plaintext highlighter-rouge">dnf module</code>, <code class="language-plaintext highlighter-rouge">dnf module list</code>, <code class="language-plaintext highlighter-rouge">dnf module install module:stream</code>, etc. In particular is <code class="language-plaintext highlighter-rouge">dnf module info</code>, which gives detailed information and description about each module stream.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">libmodulemd</code> has the ability to manage translations for these description fields, so that DNF (and other tools like it) can present the descriptions in the user‚Äôs preferred languages (English, Swahili, Mandarin, etc.)</p> </li> <li> <p>We do that by including another YAML document type in the module metadata (<code class="language-plaintext highlighter-rouge">document: modulemd-translations</code>). This is essentially a lookup table of strings with their translations in various languages.</p> </li> <li> <p>What we don‚Äôt have right now is this:</p> </li> </ol> <blockquote> <p><strong>An automatic way to extract these strings(summaries, descriptions) and push them to Zanata, and a way to retrieve the translations from Zanata, convert them to modulemd-translation documents and include them in the module metadata in the package repository that DNF reads.</strong></p> </blockquote> <ol> <li>There‚Äôs two parts to the task: <ol> <li> <p><strong>Phase 1</strong>: Extract all translatable strings from the modules that have been built for each Fedora release and submit them to the translation tool, Zanata, for the translators to work on.</p> </li> <li> <p><strong>Phase 2</strong>: Retrieve the finished translations and use the libmodulemd API to turn them into modulemd-translations documents.</p> </li> </ol> </li> <li><strong>Stretch Goal</strong>: Include the code from Phase 2 into Fedora‚Äôs repo creation automation so that it gets updated automatically every day.</li> </ol> <p>I‚Äôm creating a Python library called <code class="language-plaintext highlighter-rouge">ModulemdTranslationHelpers</code> that will achieve the task mentioned above. I‚Äôve been greatly enthused by the whole concept of modularity and this project is super interesting!</p>]]></content><author><name></name></author><category term="open-source"/><category term="open source"/><category term="outreachy"/><category term="technology"/><category term="gsoc"/><category term="research"/><category term="python"/><category term="jekyll"/><category term="modularity"/><category term="fedora"/><summary type="html"><![CDATA[My Outreachy project, and a rough timeline of how I'm going to implement it]]></summary></entry><entry><title type="html">The Open Source community is more welcoming than your next-door neighbour</title><link href="https://orionstar25.github.io/blog/2019/outreachy-week-1/" rel="alternate" type="text/html" title="The Open Source community is more welcoming than your next-door neighbour"/><published>2019-05-30T00:00:00+00:00</published><updated>2019-05-30T00:00:00+00:00</updated><id>https://orionstar25.github.io/blog/2019/outreachy-week-1</id><content type="html" xml:base="https://orionstar25.github.io/blog/2019/outreachy-week-1/"><![CDATA[<p>The title is true. And I can prove it.</p> <table> <thead> <tr> <th style="text-align: left">¬†</th> <th style="text-align: center">Open Source Community</th> <th style="text-align: right">Neighbour</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">1</td> <td style="text-align: center">The community is ever-growing now because of a plethora of awareness drives about OSS. You get to interact first hand with a variety of people on a greater variety of topics! Open source just doesn‚Äôt involve coding. It also consists of documentations, designs, tech talks, student-friendly programmes, <a href="https://opensource.com/article/18/12/top-2019-conferences">community events</a>, <a href="https://hacktoberfest.digitalocean.com/">Hacktober Fest</a> and lots more, all heavily important for this community‚Äôs healthy functioning.</td> <td style="text-align: right">They‚Äôre the same old and probably wish you were gone.</td> </tr> </tbody> <tbody> <tr> <td style="text-align: left">2</td> <td style="text-align: center">Every person‚Äôs journey in Open Source starts with a community bonding session, where you talk cheerfully and proudly about yourself and get to know everyone else involved in your favourite project.</td> <td style="text-align: right">Probably didn‚Äôt even wish you on your birthday.</td> </tr> </tbody> <tbody> <tr> <td style="text-align: left">3</td> <td style="text-align: center">OSS community is now engaging new contributors by organizing month-long programmes and provide handsome stipends. (GSoC)[https://summerofcode.withgoogle.com/], (Outreachy)[https://www.outreachy.org/], (SOCIS)[https://socis.esa.int/], (GCI)[https://codein.withgoogle.com/archive/], etc)</td> <td style="text-align: right">Neighbour giving you money? Good joke.</td> </tr> </tbody> <tbody> <tr> <td style="text-align: left">4</td> <td style="text-align: center">You get to learn a lot of cool geeky concepts and are perceived as highly intellectual. You get to showoff organization <a href="https://twitter.com/StarOrion25/status/993495345471655937">swag</a> and can attend OSS conferences around the world!</td> <td style="text-align: right">Probably bores you with the same abroad trip story and pics they took 2 yrs back.</td> </tr> </tbody> </table> <p rules="groups">And all these realizations didn‚Äôt come to me by <em>just</em> reading about them in blogs. I experienced it all firsthand. My journey hasn‚Äôt been a straightforward one.</p> <p>I had heard about GSoC during my 1st year of university, in a talk given by <a href="https://twitter.com/Saptak013">Saptak Sengupta</a>, a 4th year then, who was a GSoCer in FOSSASIA. Following his talk and reading various blogs online, I decided to apply for GSoC in my 2nd year when with some <em>magic googling</em>, I came across Outreachy. That year, I had applied with Mozilla for both the programs. I contributed to each project for <a href="https://orionstar25.github.io/respec-my-interpretation/">2 months</a> but unfortunately wasn‚Äôt selected. Outreachy happens bi-yearly and so I applied again in December, only to get rejected due to ineligibility issues. By this time I wanted to be a part of an open source programme more than ever. With a lot of motivation from some of my friends, I decided to streamline my efforts and applied for Outreachy for the current round.</p> <blockquote> <p><strong>And here I am!</strong></p> </blockquote> <p>I chose Outreachy over GSoC for a couple of reasons:</p> <ol> <li>I can‚Äôt be an Outreachy intern if I‚Äôve been a GSoC intern previously(not applicable vice-a-versa).</li> <li>While both the programmes promote awareness about opensource, Outreachy also hugley promoted diversity. This is something I strongly believe in and have been advocating it during my entire college life.</li> <li>Its a little easier(can also say faster) to start contributing to an Outreachy project than a GSoc one. The codebase is generally intuitive, the pool of people applying is very focused, and mentors give greater attention to individuals.</li> <li>And the stipend is a little too cool xD. We also get an additional $500 as trival stipend and I feel its such a brilliant way to engage people to explore and expand their physical boundaries!</li> </ol> <h2 id="how-to-choose-projects">How to choose projects:</h2> <p>I can‚Äôt stress this enough(and I wish I was told this earlier).</p> <blockquote> <p>CHOOSE PROJECTS THAT MAKE SENSE TO YOU, AND NOT BECAUSE YOUR FRIENDS ARE DOING THE SAME.</p> </blockquote> <p>There is a huge amount of love for FOSSASIA in my university for some unknown reason. I too, following suit, <em>attempted</em> to contribute there. I failed miserably mainly because I wasn‚Äôt comfortable with the tech stack and the projects just didn‚Äôt speak to me. I also tried <a href="http://teammatesv4.appspot.com/">TEAMMATES-NUS</a>, <a href="https://www.torproject.org/">The Tor Project</a>and <a href="https://www.wikimedia.org/">Wikimedia</a>. I‚Äôm primarily an Ubuntu user and I love the control a terminal window gives me. I realized that I was more fluent in <code class="language-plaintext highlighter-rouge">C++/C</code> and <code class="language-plaintext highlighter-rouge">Python</code> than <code class="language-plaintext highlighter-rouge">JavaScript</code>, and that‚Äôs when I landed upon my project: <code class="language-plaintext highlighter-rouge">Extend unit tests for libmodulemd</code> (the project has changed now drastically, more about it <a href="https://orionstar25.github.io/outreachy-week-2/">here</a>). While it eventually required me to triple boot my machine <code class="language-plaintext highlighter-rouge">(Windows + Ubuntu + Fedora)</code>, the intuitive code base and my mentor‚Äôs constant feedback made me passionate about contributing to Fedora.</p> <p>I started with solving documentation issues, while other participants had started contributing to the actual codebase. After failing to run the project on a VM (<strong>6 TIMES</strong>), and triple booting it, I started tackling issues labelled as <code class="language-plaintext highlighter-rouge">Good-first-issue</code>. I would claim an issue and start working on it. Whenever I was stuck I would ask for doubts on Github and IRC.</p> <blockquote> <p>In Outreachy, its more important to be consistent in your work than proficient.</p> </blockquote> <p>Its one thing to practice Geeks For Geeks, sit for campus placements and get a job. But its completely another and noteworthy if you yourself initiate contributing to OSS. It takes guts. But as someone correctly said,</p> <blockquote> <p>Everything is difficult before its easy :-)</p> </blockquote>]]></content><author><name></name></author><category term="open-source"/><category term="open source"/><category term="technology"/><category term="gsoc"/><category term="research"/><category term="python"/><category term="outreachy"/><category term="beginner"/><category term="jekyll"/><summary type="html"><![CDATA[An honest, beginner's guide of contributing to Open Source Software]]></summary></entry></feed>